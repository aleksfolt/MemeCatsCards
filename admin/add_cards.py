import json
import aiosqlite
from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
    CallbackQuery,
    ContentType, InputFile, FSInputFile,
)
from aiogram.filters import Command

from database.cards import cards_data, reset_cooldown
from database.mailing import get_stats

ADMIN_ID = []

admin_router = Router()


class CardStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_rarity = State()
    waiting_for_photo = State()
    waiting_for_message = State()


def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÉè –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="add_card")],
            [InlineKeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="show_cards")],
            [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_broadcast")],
            [InlineKeyboardButton(text="üíæ –†–µ–∑–µ—Ä–≤ –ë/–î", callback_data="backup_db")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")],
        ]
    )
    return keyboard


def get_cancel_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ]
    )
    return keyboard


@admin_router.message(Command('admin'))
async def start(message: Message):
    if message.from_user.id not in ADMIN_ID:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
    else:
        if message.chat.type != "private":
            await message.reply("–ù–ê–ô–ù, –¢–û–õ–¨–ö–û –í –õ–°")
            return
        await show_admin_panel(message)


async def show_admin_panel(message: Message):
    keyboard = get_admin_keyboard()
    await message.answer("üéõÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**", reply_markup=keyboard, parse_mode='Markdown')


@admin_router.callback_query(F.data == "cancel_action")
async def cancel_action(callback_query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await callback_query.answer("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return
    await state.clear()
    await callback_query.message.edit_text("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
    await callback_query.answer()


@admin_router.callback_query(F.data == "send_broadcast")
async def start_broadcast(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üì¢ **–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏** (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞):",
        reply_markup=get_cancel_keyboard(),
        parse_mode='Markdown'
    )
    await state.set_state(CardStates.waiting_for_message)
    await callback_query.answer()


@admin_router.message(CardStates.waiting_for_message, F.content_type == ContentType.TEXT)
async def process_broadcast_message(message: Message, state: FSMContext):
    broadcast_text = message.text
    await state.clear()

    await message.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ —á–∞—Ç–∞–º...", reply_markup=get_admin_keyboard())

    async with aiosqlite.connect("database.db") as db:
        cursor = await db.execute("SELECT DISTINCT chat_id FROM chat_users WHERE chat_id IS NOT NULL")
        rows = await cursor.fetchall()
        chat_ids = [row[0] for row in rows]

    success_count = 0
    failure_count = 0

    for chat_id in chat_ids:
        try:
            await message.bot.send_message(
                chat_id=chat_id,
                text=broadcast_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            success_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
            failure_count += 1

    await message.answer(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.**\n\n"
        f"üéØ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {failure_count}",
        parse_mode='Markdown'
    )


@admin_router.callback_query(F.data == "show_stats")
async def show_stats(callback_query: CallbackQuery):
    users_count, chats_count = await get_stats()

    stats_message = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        f"üë§ –õ–∏—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{users_count}**\n"
        f"üí¨ –ß–∞—Ç–æ–≤: **{chats_count}**"
    )
    await callback_query.message.edit_text(stats_message, parse_mode='Markdown', reply_markup=get_admin_keyboard())
    await callback_query.answer()


@admin_router.callback_query(F.data == "add_card")
async def add_card(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üìù **–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏:**",
        reply_markup=get_cancel_keyboard(),
        parse_mode='Markdown'
    )
    await state.set_state(CardStates.waiting_for_name)
    await callback_query.answer()


@admin_router.callback_query(F.data == "show_cards")
async def show_cards(callback_query: CallbackQuery):
    if not cards_data.get("cards"):
        await callback_query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.", reply_markup=get_admin_keyboard())
    else:
        text = "üìú **–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫:**\n\n"
        for card in cards_data["cards"]:
            media_type = card.get("media_type", "photo")
            rarity = card.get("rarity", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += (
                f"‚Ä¢ **{card['name']}**\n"
                f"  ID: {card['id']}\n"
                f"  –†–µ–¥–∫–æ—Å—Ç—å: {rarity}\n"
            )
        await callback_query.message.edit_text(text, parse_mode='Markdown', reply_markup=get_admin_keyboard())
    await callback_query.answer()


@admin_router.callback_query(F.data == "backup_db")
async def backup_db(callback_query: CallbackQuery):
    try:
        db_file = FSInputFile("database.db")
        await callback_query.bot.send_document(
            chat_id=callback_query.message.chat.id,
            document=db_file,
            caption="üì¶ *–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.*",
            parse_mode="MarkDown"
        )
        await callback_query.message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°.")
    except Exception as e:
        await callback_query.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    await callback_query.answer()


@admin_router.message(CardStates.waiting_for_photo, F.content_type == ContentType.ANY)
async def process_invalid_photo(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –∏–ª–∏ GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏.",
                         reply_markup=get_cancel_keyboard())


@admin_router.message(CardStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                             reply_markup=get_cancel_keyboard())
        return
    await state.update_data(name=name)
    await message.answer("‚ú® **–í–≤–µ–¥–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏:**", reply_markup=get_cancel_keyboard(), parse_mode='Markdown')
    await state.set_state(CardStates.waiting_for_rarity)


@admin_router.message(CardStates.waiting_for_rarity)
async def process_rarity(message: Message, state: FSMContext):
    rarity = message.text.strip()
    if not rarity:
        await message.answer("‚ùå –†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                             reply_markup=get_cancel_keyboard())
        return
    await state.update_data(rarity=rarity)
    await message.answer("üì∑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –∏–ª–∏ GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏:**",
                         reply_markup=get_cancel_keyboard(), parse_mode='Markdown')
    await state.set_state(CardStates.waiting_for_photo)


@admin_router.message(
    CardStates.waiting_for_photo,
    F.content_type.in_([ContentType.PHOTO, ContentType.ANIMATION])
)
async def process_photo(message: Message, state: FSMContext):
    if message.content_type == ContentType.PHOTO:
        media_file = message.photo[-1]
        media_type = "photo"
    elif message.content_type == ContentType.ANIMATION:
        media_file = message.animation
        media_type = "animation"
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –∏–ª–∏ GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏.",
                             reply_markup=get_cancel_keyboard())
        return

    file_id = media_file.file_id
    await state.update_data(file_id=file_id, media_type=media_type)
    data = await state.get_data()

    if cards_data.get("cards"):
        max_id = max(int(card["id"]) for card in cards_data["cards"] if card["id"].isdigit())
        new_id = str(max_id + 1)
    else:
        new_id = '1'

    card = {
        "name": data["name"],
        "id": new_id,
        "rarity": data["rarity"],
        "file_id": data["file_id"],
        "media_type": data["media_type"]
    }
    cards_data["cards"].append(card)

    with open('cards.json', 'w', encoding='utf-8') as f:
        json.dump(cards_data, f, ensure_ascii=False, indent=4)

    await message.answer(
        f"‚úÖ **–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"‚Ä¢ **ID:** {new_id}\n"
        f"‚Ä¢ **–ò–º—è:** {data['name']}\n"
        f"‚Ä¢ **–†–µ–¥–∫–æ—Å—Ç—å:** {data['rarity']}\n"
        f"‚Ä¢ **–¢–∏–ø:** {data['media_type']}",
        parse_mode='Markdown',
        reply_markup=get_admin_keyboard()
    )
    await state.clear()


@admin_router.message(CardStates.waiting_for_photo, F.content_type == ContentType.ANY)
async def handle_invalid_photo(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –∏–ª–∏ GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏.",
                         reply_markup=get_cancel_keyboard())
