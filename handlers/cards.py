import asyncio
import datetime
import random
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from database.cards import get_last_card_time, cards_data, add_card_and_points, has_user_card
from database.cooldown import get_cooldown_time, get_cooldown_state
from filters.FloodWait import RateLimitFilter

cards_router = Router()

COOLDOWN_SECONDS = 5400

RARITY_POINTS = {
    "–†–µ–¥–∫–∞—è": 1500,
    "–°–≤–µ—Ä—Ö–†–µ–¥–∫–∞—è": 3500,
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": 5000,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 10000,
    "–ê–Ω–∏–º–∫–∞": 15000
}


async def auto_delete(bot, chat_id: int, user_message_id: int, bot_message_id: int):
    delete_state = await get_cooldown_state(chat_id)
    delete_time_minutes = await get_cooldown_time(chat_id)

    if delete_state != "on":
        return

    delete_delay = int(delete_time_minutes) * 60
    if delete_delay <= 0:
        return

    await asyncio.sleep(delete_delay)

    try:
        await bot.delete_message(chat_id, user_message_id)
        await bot.delete_message(chat_id, bot_message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–∏: {e}")


@cards_router.message(RateLimitFilter(2), Command("mcat"))
@cards_router.message(RateLimitFilter(2), F.text.lower().in_({"–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", "–º–∫–æ—Ç", "üêà –º–∫–æ—Ç"}))
async def cards_handler(msg: Message):
    user_id = msg.from_user.id
    first_name = msg.from_user.first_name
    chat_id = msg.chat.id
    current_time = datetime.datetime.now()

    last_time = await get_last_card_time(user_id)
    if last_time is not None:
        elapsed_seconds = (current_time - last_time).total_seconds()
        if elapsed_seconds < COOLDOWN_SECONDS:
            remaining_seconds = int(COOLDOWN_SECONDS - elapsed_seconds)
            remaining_hours = remaining_seconds // 3600
            remaining_minutes = (remaining_seconds % 3600) // 60
            remaining_seconds = remaining_seconds % 60
            await msg.reply(
                f"<i>–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –Ω–µ–¥–∞–≤–Ω–æ.</i> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë:\n\n"
                f"<b>{remaining_hours} —á {remaining_minutes} –º–∏–Ω {remaining_seconds} —Å–µ–∫</b> ‚è≥",
                parse_mode='HTML'
            )
            return

    random_number = random.randint(1, 100)
    if 1 <= random_number <= 5:
        rarity = "–ê–Ω–∏–º–∫–∞ üé•"
    elif 6 <= random_number <= 15:
        rarity = "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è üåü"
    elif 16 <= random_number <= 30:
        rarity = "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è ‚ú®"
    elif 31 <= random_number <= 50:
        rarity = "–°–≤–µ—Ä—Ö–†–µ–¥–∫–∞—è üíé"
    else:
        rarity = "–†–µ–¥–∫–∞—è ‚≠êÔ∏è"

    clean_rarity = rarity.split(" ")[0]
    eligible_cards = [card for card in cards_data["cards"] if card["rarity"] == clean_rarity]
    if not eligible_cards:
        await msg.answer(f"<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é</i> <b>{rarity}</b>.", parse_mode='HTML')
        return

    selected_card = random.choice(eligible_cards)
    points = RARITY_POINTS[clean_rarity]

    if clean_rarity == "–ê–Ω–∏–º–∫–∞":
        send_method = msg.answer_animation
        media_arg = {"animation": selected_card["file_id"]}
    else:
        send_method = msg.answer_photo
        media_arg = {"photo": selected_card["file_id"]}

    if await has_user_card(user_id, selected_card["id"]):
        bot_message = await send_method(
            **media_arg,
            caption=(
                f"<b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</b> üÉè\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{selected_card['name']}</b>\n"
                f"–†–µ–¥–∫–æ—Å—Ç—å: <b>{rarity}</b>\n"
                f"<i>–ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤:</i> <b>{points} ü™ô</b>\n\n"
                "<blockquote>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞–Ω–µ–µ. –ù–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—á–∫–∏!</blockquote>"
            ),
            parse_mode='HTML',
            reply_to_message_id=msg.message_id
        )
    else:
        bot_message = await send_method(
            **media_arg,
            caption=(
                f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!</b>\n\n"
                f"<i>–ù–∞–∑–≤–∞–Ω–∏–µ:</i> <b>{selected_card['name']}</b>\n"
                f"<i>–†–µ–¥–∫–æ—Å—Ç—å:</i> <b>{rarity}</b>\n"
                f"<i>–ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤:</i> <b>{points} ü™ô</b>\n\n"
                "<blockquote>–°–æ–±–∏—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–æ—á–µ–∫, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!</blockquote>"
            ),
            parse_mode='HTML',
            reply_to_message_id=msg.message_id
        )

    await add_card_and_points(user_id, first_name, selected_card["id"], current_time, points)
    await auto_delete(msg.bot, chat_id, msg.message_id, bot_message.message_id)