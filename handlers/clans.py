from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)

from database.clans import (
    create_clan,
    get_user_clan,
    leave_clan,
    join_clan,
    update_clan_request_status,
    accept_member,
    reject_member,
    delete_clan,
    transfer_leadership
)
from database.cards import get_user_profile_data

clans_router = Router()


class ClansStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_join_clan_name = State()
    waiting_for_new_leader_id = State()


async def clans_kb():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè∞ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω", callback_data="tribe:create")],
        [InlineKeyboardButton(text="üÄÑÔ∏è –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω", callback_data="tribe:join")],
        [InlineKeyboardButton(text="üë§ –ú–æ–π –∫–ª–∞–Ω", callback_data="tribe:my_clan")]
    ])
    return keyboard


async def send_clans_menu(callback_or_message):
    text = "<b>–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.</b>"
    if callback_or_message.message.chat.type in ["group", "supergroup"]:
        await callback_or_message.answer("‚ùå –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É –±–æ—Ç–∞.", show_alert=True)
        return 
    if isinstance(callback_or_message, CallbackQuery):
        try:
            await callback_or_message.message.edit_text(
                text=text,
                reply_markup=await clans_kb(),
                parse_mode="HTML"
            )
        except Exception:
            await callback_or_message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True
            )
    elif isinstance(callback_or_message, Message):
        await callback_or_message.answer(
            text=text,
            reply_markup=await clans_kb(),
            parse_mode="HTML"
        )


@clans_router.callback_query(F.data.startswith("clans"))
async def clans(callback: CallbackQuery):
    user_id = callback.from_user.id
    data_parts = callback.data.split(":")
    if len(data_parts) > 1 and data_parts[1] != str(user_id) and data_parts[1] != "menu":
        await callback.answer("‚ùå <b>–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!</b>", show_alert=True)
        return
    await send_clans_menu(callback)


@clans_router.callback_query(F.data.startswith("tribe:"))
async def tribe_callback_handler(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    user_id = callback.from_user.id

    if action == "create":
        user_clan = await get_user_clan(user_id)
        if user_clan:
            await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞–Ω–∞.", show_alert=True)
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
        ])
        await callback.message.edit_text(
            "<b>‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∞–Ω–∞:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(ClansStates.waiting_for_name)
    elif action == "my_clan":
        user_clan = await get_user_clan(user_id)
        if user_clan:
            clan_name = user_clan['name']
            members_count = len(user_clan['members'])
            text = (
                f"üë• <b>–í–∞—à –∫–ª–∞–Ω:</b> <i>{clan_name}</i>\n"
                f"üßë‚Äçü§ù‚Äçüßë <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <i>{members_count}</i>"
            )
            keyboard_buttons = [
                [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞", callback_data="tribe:leave")]
            ]
            if user_id == user_clan['creator']:
                keyboard_buttons.append(
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–Ω–∞", callback_data="tribe:settings")]
                )
            keyboard_buttons.append(
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ.", show_alert=True)
    elif action == "settings":
        user_clan = await get_user_clan(user_id)
        if user_clan:
            if user_id != user_clan['creator']:
                await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ.", show_alert=True)
                return
            request_status = user_clan.get('request', 0)
            if request_status:
                request_text = "‚úÖ –ü–æ –∑–∞—è–≤–∫–∞–º"
            else:
                request_text = "‚ùå –ü–æ –∑–∞—è–≤–∫–∞–º"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=request_text, callback_data="tribe:toggle_request")],
                    [InlineKeyboardButton(text="üëë –ü–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ", callback_data="tribe:transfer_leadership")],
                    [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω", callback_data="tribe:delete_clan")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:my_clan")]
                ]
            )
            await callback.message.edit_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–Ω–∞:</b>", reply_markup=keyboard, parse_mode="HTML")
        else:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ.", show_alert=True)
    elif action == "transfer_leadership":
        user_clan = await get_user_clan(user_id)
        if user_clan:
            if user_id != user_clan['creator']:
                await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ.", show_alert=True)
                return
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:settings")]
            ])
            await callback.message.edit_text(
                "<b>‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ:</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(ClansStates.waiting_for_new_leader_id)
        else:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ.", show_alert=True)
    elif action == "confirm_transfer_leadership":
        data = await state.get_data()
        new_leader_id = data.get('new_leader_id')
        if not new_leader_id:
            await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return
        user_clan = await get_user_clan(user_id)
        if user_clan['creator'] != user_id:
            await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ.", show_alert=True)
            return
        success, message_text = await transfer_leadership(user_clan['id'], new_leader_id)
        if success:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
            ])
            await callback.message.edit_text("<b>‚úÖ –õ–∏–¥–µ—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ.</b>", reply_markup=keyboard, parse_mode="HTML")
            await state.clear()
            await callback.bot.send_message(
                chat_id=int(new_leader_id),
                text="<b>‚úÖ –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–∞–º.</b>",
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞.", show_alert=True)
    elif action == "toggle_request":
        user_clan = await get_user_clan(user_id)
        if user_clan:
            if user_id != user_clan['creator']:
                await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ.", show_alert=True)
                return
            new_request_status = 0 if user_clan['request'] else 1
            await update_clan_request_status(user_clan['id'], new_request_status)
            user_clan['request'] = new_request_status
            if new_request_status:
                request_text = "‚úÖ –ü–æ –∑–∞—è–≤–∫–∞–º"
            else:
                request_text = "‚ùå –ü–æ –∑–∞—è–≤–∫–∞–º"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=request_text, callback_data="tribe:toggle_request")],
                    [InlineKeyboardButton(text="üëë –ü–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ", callback_data="tribe:transfer_leadership")],
                    [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω", callback_data="tribe:delete_clan")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:my_clan")]
                ]
            )
            await callback.message.edit_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–Ω–∞:</b>", reply_markup=keyboard, parse_mode="HTML")
        else:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ.", show_alert=True)
    elif action == "delete_clan":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="tribe:confirm_delete_clan")],
                [InlineKeyboardButton(text="üîô –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="tribe:settings")]
            ]
        )
        await callback.message.edit_text(
            "<b>‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    elif action == "confirm_delete_clan":
        user_clan = await get_user_clan(user_id)
        if user_clan:
            if user_id != user_clan['creator']:
                await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.", show_alert=True)
                return
            success, message_text = await delete_clan(user_clan['id'])
            if success:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
                ])
                await callback.message.edit_text("<b>‚úÖ –ö–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</b>", reply_markup=keyboard, parse_mode="HTML")
            else:
                await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞.", show_alert=True)
        else:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ.", show_alert=True)
    elif action == "leave":
        success, message_text = await leave_clan(user_id)
        if success:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
            ])
            await callback.message.edit_text("<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞.</b>", reply_markup=keyboard, parse_mode="HTML")
        else:
            await callback.answer(f"‚ö†Ô∏è {message_text}", show_alert=True)
    elif action == "join":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
        ])
        await callback.message.edit_text(
            "<b>‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∞–Ω–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(ClansStates.waiting_for_join_clan_name)
    elif action == "back":
        await state.clear()
        await callback.answer()
        await send_clans_menu(callback)
    else:
        await callback.message.edit_text("‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>", parse_mode="HTML")


@clans_router.callback_query(F.data == "tribe:back")
async def handle_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await send_clans_menu(callback)


@clans_router.message(ClansStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    success, message_text = await create_clan(message.text.strip(), message.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
    ])
    if success:
        await message.reply(f"‚úÖ <b>{message_text}</b>", reply_markup=keyboard, parse_mode="HTML")
        await state.clear()
    else:
        await message.reply(f"‚ö†Ô∏è <b>{message_text}</b>\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:</b>", reply_markup=keyboard, parse_mode="HTML")


@clans_router.message(ClansStates.waiting_for_join_clan_name)
async def process_join_clan_name(message: Message, state: FSMContext):
    clan_name = message.text.strip()
    user_id = message.from_user.id
    success, message_text, creator_id = await join_clan(user_id, clan_name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tribe:back")]
    ])
    if success:
        await message.reply(f"‚úÖ <b>{message_text}</b>", reply_markup=keyboard, parse_mode="HTML")
        if creator_id:
            await notify_clan_creator(message.bot, creator_id, user_id, clan_name)
        await state.clear()
    else:
        await message.reply(f"‚ö†Ô∏è <b>{message_text}</b>\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∫–ª–∞–Ω–∞:</b>", reply_markup=keyboard, parse_mode="HTML")


@clans_router.message(ClansStates.waiting_for_new_leader_id)
async def process_new_leader_id(message: Message, state: FSMContext):
    user_id = message.from_user.id
    new_leader_id = message.text.strip()
    if not new_leader_id.isdigit():
        await message.reply("‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>", parse_mode="HTML")
        return
    new_leader_id = int(new_leader_id)
    user_clan = await get_user_clan(user_id)
    if new_leader_id not in user_clan['members']:
        await message.reply("‚ö†Ô∏è <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>", parse_mode="HTML")
        return
    if new_leader_id == user_id:
        await message.reply("‚ö†Ô∏è <b>–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –∫–ª–∞–Ω–∞.</b>", parse_mode="HTML")
        return
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞
    await state.update_data(new_leader_id=new_leader_id)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëë –î–∞, –ø–µ—Ä–µ–¥–∞—Ç—å", callback_data="tribe:confirm_transfer_leadership")],
            [InlineKeyboardButton(text="üîô –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="tribe:settings")]
        ]
    )
    await message.reply(
        f"‚ùóÔ∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id {new_leader_id}?</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def notify_clan_creator(bot: Bot, creator_id: int, user_id: int, clan_name: str):
    user_profile = await get_user_profile_data(user_id)
    if user_profile:
        now_points = user_profile['now_points']
        all_points = user_profile['all_points']
        cards_count = len(user_profile['cards'])
    else:
        now_points = 0
        all_points = 0
        cards_count = 0

    text = (
        f"üìù <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤–∞—à –∫–ª–∞–Ω '{clan_name}':</b>\n\n"
        f"üë§ <b>–ò–≥—Ä–æ–∫:</b> <a href='tg://user?id={user_id}'>{user_id}</a>\n"
        f"üí† <b>–û—á–∫–∏ —Å–µ–π—á–∞—Å:</b> {now_points}\n"
        f"üèÖ <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> {all_points}\n"
        f"üÉè <b>–ö–∞—Ä—Ç–æ—á–µ–∫:</b> {cards_count}\n\n"
        f"<b>–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?</b>"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
        ]
    ])
    await bot.send_message(
        chat_id=creator_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@clans_router.callback_query(F.data.startswith("accept:") | F.data.startswith("reject:"))
async def handle_join_request_response(callback: CallbackQuery):
    data = callback.data
    if data.startswith('accept:'):
        action = 'accept'
    elif data.startswith('reject:'):
        action = 'reject'
    else:
        return

    user_id = int(data.split(":")[1])
    clan_creator_id = callback.from_user.id

    if action == 'accept':
        success, message = await accept_member(clan_creator_id, user_id)
        if success:
            await callback.message.edit_text("<b>‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∏–≥—Ä–æ–∫–∞ –≤ –∫–ª–∞–Ω.</b>", parse_mode="HTML")
            await callback.bot.send_message(
                user_id,
                "<b>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>",
                parse_mode="HTML"
            )
        else:
            if "–ó–∞—è–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞" in message:
                await callback.message.edit_text(f"‚ö†Ô∏è <b>{message}</b>", parse_mode="HTML")
            else:
                await callback.answer(f"‚ö†Ô∏è {message}", show_alert=True)
    elif action == 'reject':
        success, message = await reject_member(clan_creator_id, user_id)
        if success:
            await callback.message.edit_text("<b>‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω.</b>", parse_mode="HTML")
            await callback.bot.send_message(
                user_id,
                "<b>‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>",
                parse_mode="HTML"
            )
        else:
            await callback.answer(f"‚ö†Ô∏è {message}", show_alert=True)
