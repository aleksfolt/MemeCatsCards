from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberAdministrator, ChatMemberOwner, CallbackQuery

from database.cooldown import toggle_cooldown_state, set_cooldown_time
from database.mailing import add_user, add_chat
from kb import cooldown_kb, cooldown_time_kb, add_to_group, start_keyboard

router = Router()


async def is_admin_with_rights(message: Message) -> bool:
    admins = await message.bot.get_chat_administrators(chat_id=message.chat.id)

    for admin in admins:
        if admin.user.id == message.from_user.id:
            if isinstance(admin, ChatMemberAdministrator) and admin.can_promote_members:
                return True
            if isinstance(admin, ChatMemberOwner):
                return True

    return False


@router.message(Command("start"))
async def start_handler(msg: Message):
    mention = msg.from_user.mention_html()
    user_id = msg.from_user.id
    chat_id = msg.chat.id
    text = (f"üëã {mention}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MemeCats Cards!\n\n"
            f"üÉè –û—Ç–∫—Ä—ã–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ–º–Ω—ã–º–∏ –∫–æ—Ç–∞–º–∏..\n\n"
            f"üîÑ –í—Å–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –Ω–æ–≤—ã–µ –∫–æ—Ç–∏–∫–∏ –æ–∂–∏–¥–∞—é—Ç —Ç–µ–±—è.\n\n")
    if msg.chat.type == "private":
        text += '<blockquote> üöÄ –ù–∞–ø–∏—à–∏ "–º–∫–æ—Ç" —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É. </blockquote>'
        await msg.bot.send_sticker(
            chat_id=chat_id,
            sticker="CAACAgIAAxkBAAENI7xnOayUyZWNA_oYkHmB90x1HW5uNQACujkAArW6WUjV9K26kAro_jYE",
            reply_markup=await start_keyboard()
        )
        await msg.answer(text, parse_mode=ParseMode.HTML, reply_markup=await add_to_group())
        await add_user(user_id)
    elif msg.chat.type in ["group", "supergroup"]:
        text += '<blockquote> üöÄ –ù–∞–ø–∏—à–∏ "–º–∫–æ—Ç" —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.</blockquote>\n‚ùî /help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.'
        await msg.reply(text, parse_mode=ParseMode.HTML, reply_markup=await add_to_group())
        await add_chat(chat_id)


@router.message(Command("help"))
async def start_handler(msg: Message):
    text = (
        f"<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        f"üéÆ <b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
        f"/start ‚Äî –ù–∞—á–∞—Ç—å –∏–≥—Ä—É üÉè\n"
        f"/mcat ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üé≤\n\n"
        f"üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"/adm ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ ‚è≥\n"
        f"/profile ‚Äî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üé¥\n\n"
        f"<i>–°–æ–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –∏ —Å—Ç–∞–Ω—å—Ç–µ –ª—É—á—à–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–º! üêæ</i>"
    )
    await msg.reply(text, parse_mode="HTML")


@router.message(Command("adm"))
async def adm_handler(msg: Message):
    if msg.chat.type not in ["group", "supergroup"]:
        await msg.answer("‚ùå –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!", reply_markup=await add_to_group())
        return
    chat_id = msg.chat.id
    user_id = msg.from_user.id
    is_admin = await is_admin_with_rights(msg)
    if not is_admin:
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    explanation_text = (
        "üïì <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ö—É–ª–¥–∞—É–Ω)</b>\n\n"
        "<i>–ö—É–ª–¥–∞—É–Ω</i> ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è. "
        "–ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –ª—É—á—à–µ –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤–µ—Å—å —á–∞—Ç."
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ.\n"
    )
    await msg.answer(explanation_text, parse_mode=ParseMode.HTML, reply_markup=await cooldown_kb(user_id, chat_id))


@router.callback_query(F.data.startswith("toggle:"))
async def toggle_cooldown_handler(callback: CallbackQuery):
    user_id = callback.data.split(":")[1]
    if user_id != str(callback.from_user.id):
        await callback.answer("–ù–µ –¥–ª—è –≤–∞—à–∏—Ö –ª–∞–ø–æ–∫ –∫–Ω–æ–ø–∫–∞.")
        return
    chat_id = callback.message.chat.id
    await toggle_cooldown_state(chat_id)
    await callback.message.edit_reply_markup(reply_markup=await cooldown_kb(int(user_id), chat_id))


@router.callback_query(F.data.startswith("set_time:"))
async def open_cooldown_time_menu(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.data.split(":")[1]
    if user_id != str(callback.from_user.id):
        await callback.answer("–ù–µ –¥–ª—è –≤–∞—à–∏—Ö –ª–∞–ø–æ–∫ –∫–Ω–æ–ø–∫–∞.")
        return
    await callback.message.edit_text(
        "üïì <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        "<i>–ü–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ.</i>\n\n"
        "üîÑ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:</b>",
        reply_markup=await cooldown_time_kb(chat_id, user_id),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("time_set:"))
async def set_cooldown_time_handler(callback: CallbackQuery):
    _, chat_id, minutes, user_idd = callback.data.split(":")
    user_id = callback.from_user.id
    if user_idd != str(user_id):
        await callback.answer("–ù–µ –¥–ª—è –≤–∞—à–∏—Ö –ª–∞–ø–æ–∫ –∫–Ω–æ–ø–∫–∞.")
        return
    chat_id = int(chat_id)
    minutes = int(minutes)

    await set_cooldown_time(chat_id, minutes)
    await callback.message.edit_text(
        f"‚è≥ <b>–í—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {minutes} –º–∏–Ω—É—Ç.\n\n"
        "<i>–¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.</i>",
        reply_markup=await cooldown_kb(user_id, chat_id),
        parse_mode=ParseMode.HTML
    )
    await callback.answer(f"–ö—É–ª–¥–∞—É–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")


@router.callback_query(F.data.startswith("back:"))
async def back_to_main_menu(callback: CallbackQuery):
    _, chat_id, user_idd = callback.data.split(":")
    user_id = callback.from_user.id
    if user_idd != str(user_id):
        await callback.answer("–ù–µ –¥–ª—è –≤–∞—à–∏—Ö –ª–∞–ø–æ–∫ –∫–Ω–æ–ø–∫–∞.")
        return
    await callback.message.edit_text(
        "üïì <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "<i>–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤ —á–∞—Ç–µ.</i>",
        reply_markup=await cooldown_kb(user_id, chat_id),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
