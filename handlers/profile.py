from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaAnimation
from aiogram.utils.text_decorations import html_decoration

from database.cards import get_user_profile_data, cards_data, get_top_users_by_now_points, get_top_users_by_cards, \
    get_top_users_by_all_points
from database.clans import get_top_clans_by_points
from kb import profile_kb, rarity_kb, cards_keyboard, top_kb, top_back_kb

profile_router = Router()

RARITY_POINTS = {
    "–†–µ–¥–∫–∞—è": 1500,
    "–°–≤–µ—Ä—Ö–†–µ–¥–∫–∞—è": 3500,
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": 5000,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 10000,
    "–ê–Ω–∏–º–∫–∞": 15000
}


@profile_router.message(Command("profile"))
@profile_router.message(F.text.lower().in_({"–º–ø—Ä–æ—Ñ–∏–ª—å", "üë•Ô∏è –ø—Ä–æ—Ñ–∏–ª—å"}))
async def profile(msg: Message):
    user_id = msg.from_user.id
    user_data = await get_user_profile_data(user_id)
    if not user_data:
        await msg.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return
    cards = user_data["cards"]
    now_points = user_data["now_points"]
    all_points = user_data["all_points"]
    card_count = len(cards)
    profile_text = (
        f"üé¥ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b> üé¥\n\n"
        f"üë§ <b>–ò–º—è:</b> {html_decoration.bold(html_decoration.quote(msg.from_user.first_name))}\n"
        f"üÉè <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫:</b> {card_count}\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏:</b> {now_points} ü™ô\n"
        f"üèÜ <b>–û—á–∫–∏ –∑–∞ –≤—Å–µ —Å–µ–∑–æ–Ω—ã:</b> {all_points} üèÖ\n\n"
        "<i>–°–æ–±–∏—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–π —Å—á—ë—Ç!</i> üìà"
    )
    await msg.reply(profile_text, parse_mode="HTML", reply_markup=await profile_kb(user_id))


@profile_router.callback_query(F.data.startswith("top:"))
async def top_cards(callback: CallbackQuery):
    user_id = callback.from_user.id
    if callback.data.split(":")[1] != str(user_id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    await callback.message.reply(
        "<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–ø:</blockquote>",
        reply_markup=await top_kb(user_id),
        parse_mode="HTML"
    )


@profile_router.callback_query(F.data.startswith("top_"))
async def show_top(callback: CallbackQuery):
    data = callback.data.split(":")
    top_data = data[0]
    user_id = callback.from_user.id
    if data[1] != str(user_id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    top_type = top_data.split("_")[1]
    if top_type == "points":
        top_users = await get_top_users_by_now_points()
        text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –æ—á–∫–∞–º:\n\n"
        for i, (user_id, first_name, now_points) in enumerate(top_users, start=1):
            text += f"<blockquote> {i}. {html_decoration.bold(html_decoration.quote(first_name))} - {now_points} –æ—á–∫–æ–≤ </blockquote>\n"
    elif top_type == "cards":
        top_users = await get_top_users_by_cards()
        text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n"
        for i, (user_id, first_name, card_count) in enumerate(top_users, start=1):
            text += f"<blockquote> {i}. {html_decoration.bold(html_decoration.quote(first_name))}- {card_count} –∫–∞—Ä—Ç–æ—á–µ–∫ </blockquote>\n"
    elif top_type == "all":
        top_users = await get_top_users_by_all_points()
        text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º –∑–∞ –≤—Å–µ —Å–µ–∑–æ–Ω—ã:\n\n"
        for i, (user_id, first_name, all_points) in enumerate(top_users, start=1):
            text += f"<blockquote> {i}. {html_decoration.bold(html_decoration.quote(first_name))} - {all_points} –æ—á–∫–æ–≤ </blockquote>\n"
    elif top_type == "clans":
        top_clans = await get_top_clans_by_points()
        text = "üèÜ <b>–¢–æ–ø 10 –∫–ª–∞–Ω–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω—ã–º –æ—á–∫–∞–º:</b>\n\n"
        for i, (clan_name, member_count, total_points) in enumerate(top_clans, start=1):
            text += f"{i}. üè∞ {html_decoration.bold(html_decoration.quote(clan_name))} ‚Äî {total_points} –æ—á–∫–æ–≤ ({member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
    elif top_type == "back":
        await callback.message.edit_text(
            "<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–ø:</blockquote>",
            reply_markup=await top_kb(user_id),
            parse_mode="HTML"
        )
        return
    else:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=await top_back_kb(callback.from_user.id))


@profile_router.callback_query(F.data.startswith("cards:"))
async def show_cards(callback: CallbackQuery):
    data = callback.data.split(":")
    user_id = data[1]
    user_nickname = callback.from_user.first_name
    if user_id != str(callback.from_user.id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    try:
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
            reply_markup=await rarity_kb()
        )
        if callback.message.chat.type in ["group", "supergroup"]:
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=f"{user_nickname}, –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
                reply_to_message_id=callback.message.message_id
            )
    except:
        await callback.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ-—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏!",
            show_alert=True
        )


@profile_router.callback_query(F.data.startswith("select_rarity:"))
async def select_rarity(callback: CallbackQuery):
    rarity = callback.data.split(":")[1]
    user_data = await get_user_profile_data(callback.from_user.id)
    if user_data is None:
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    user_cards = user_data['cards']
    user_cards_data = [card for card in cards_data['cards'] if card['id'] in user_cards]
    rarity_cards = [card for card in user_cards_data if card['rarity'] == rarity]
    if not rarity_cards:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏.")
        return
    index = 0
    card = rarity_cards[index]
    points = RARITY_POINTS.get(card['rarity'], 0)
    caption = f"üÉè –ö–∞—Ä—Ç–æ—á–∫–∞: {card['name']}\nüé¥ –†–∞—Ä–∏—Ç–µ—Ç: {card['rarity']}\nüíØ –û—á–∫–∏: {points}"
    total_cards = len(rarity_cards)
    keyboard = await cards_keyboard(rarity, index, total_cards)

    if card['rarity'] == "–ê–Ω–∏–º–∫–∞":
        await callback.message.answer_animation(animation=card['file_id'], caption=caption, reply_markup=keyboard)
    else:
        await callback.message.answer_photo(photo=card['file_id'], caption=caption, reply_markup=keyboard)
    await callback.answer()


@profile_router.callback_query(F.data.startswith("view_card:"))
async def view_card(callback: CallbackQuery):
    data = callback.data.split(":")
    rarity = data[1]
    index = int(data[2])
    user_data = await get_user_profile_data(callback.from_user.id)
    if user_data is None:
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    user_cards = user_data['cards']
    user_cards_data = [card for card in cards_data['cards'] if card['id'] in user_cards]
    rarity_cards = [card for card in user_cards_data if card['rarity'] == rarity]
    total_cards = len(rarity_cards)

    card = rarity_cards[index]
    points = RARITY_POINTS.get(card['rarity'], 0)
    caption = f"üÉè –ö–∞—Ä—Ç–æ—á–∫–∞: {card['name']}\nüé¥ –†–∞—Ä–∏—Ç–µ—Ç: {card['rarity']}\nüíØ –û—á–∫–∏: {points}"
    keyboard = await cards_keyboard(rarity, index, total_cards)

    if card['rarity'] == "–ê–Ω–∏–º–∫–∞":
        media = InputMediaAnimation(media=card['file_id'], caption=caption)
    else:
        media = InputMediaPhoto(media=card['file_id'], caption=caption)

    try:
        await callback.message.edit_media(media=media, reply_markup=keyboard)
    except Exception as e:
        await callback.message.delete()
        if card['rarity'] == "–ê–Ω–∏–º–∫–∞":
            await callback.message.answer_animation(animation=card['file_id'], caption=caption, reply_markup=keyboard)
        else:
            await callback.message.answer_photo(photo=card['file_id'], caption=caption, reply_markup=keyboard)
    await callback.answer()